---
name: Docker Build and Push
on:
  workflow_call:
    # allow reuse of this workflow in other repos
    inputs:
      name: 
        description: Name when building multiple microservices
        required: false
        type: string
      comment-enable:
        description: Create a PR comment with image tags and labels
        required: false
        default: true
        type: boolean
      context:
        description: Docker context (path) to start build from
        required: false
        type: string
      file:
        description: Dockerfile to build, relative to context path
        required: false
        type: string
      image-names:
        description: A list of the account/repo names for docker build to push to
        required: false
        type: string
        default: |
          ghcr.io/${{ github.repository }}
      platforms:
        description: Platforms to build for
        required: false
        type: string
        default: linux/amd64
      push:
        description: Push image to registry(s)
        required: false
        type: boolean
        default: true
      tag-rules:
        # https://github.com/marketplace/actions/docker-metadata-action#tags-input
        description: Use docker-metadata action to create tags from a key-value pair list in CSV format
        required: false
        type: string
        # this ruleset will create one or more tags for each image in image-names
        # Tags starting with `gha-<run_id>` are unique to each PR commit, and used to test fresh images      # rules with is_default_branch only create the tag if it's a push/merge to default branch
        # priority attribute is used to sort tags in the final list. The higher the value, 
        #   the higher the priority. The first tag in the list (higher priority) will be used as 
        #   the image version for generated OCI label and version output.
        default: |
          type=raw,value=gha-${{ github.run_id }},enable=${{github.event_name == 'pull_request'}},priority=200
          type=ref,event=pr,priority=100
      target:
        description: Build stage to target
        required: false
        type: string
   
    outputs:
      image-tag:
        description: "single-use image tag for GHA runs"
        value: ${{ jobs.build-image.outputs.image-tag }}

# https://docs.github.com/en/actions/using-workflows/reusing-workflows#supported-keywords-for-jobs-that-call-a-reusable-workflow

permissions:
  contents: read
  packages: write # needed to push docker image to ghcr.io
  pull-requests: write # needed to create and update comments in PRs

jobs:
  build-image:
    name: Build & Push ${{ inputs.name }}
    runs-on: ubuntu-latest
    outputs:
      # only outputs the unique image tag that's unique to each GHA run
      image-tag: ${{ steps.image-tag.outputs.image-tag }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2.2.0

        # BuildKit (used with `docker buildx`) is the best way to build images
      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2.9.0

      - name: Login to GHCR
        uses: docker/login-action@v2.2.0
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4.6.0
        with:
          images: ${{ inputs.image-names }}
          tags: ${{ inputs.tag-rules }}

      - name: Docker Build and Push
        id: build_image
        uses: docker/build-push-action@v4.1.1
        with:
          context: ${{ inputs.context }}
          file: ${{ inputs.file }}
          target: ${{ inputs.target }}
          builder: ${{ steps.buildx.outputs.name }}
          # it uses github cache API for faster builds:
          # https://github.com/docker/build-push-action/blob/master/docs/advanced/cache.md#cache-backend-api
          cache-from: type=gha
          cache-to: type=gha,mode=max
          push: ${{ inputs.push }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

        # If PR, put image tags in the PR comments
        # from https://github.com/marketplace/actions/create-or-update-comment
      - name: Find comment for image tags
        uses: peter-evans/find-comment@v2.4.0
        if: github.event_name == 'pull_request' && inputs.comment-enable
        id: image-comment
        with:
          issue-number: ${{ github.event.pull_request.number }}
          comment-author: 'github-actions[bot]'
          body-includes: Docker image tag(s) pushed
      
        # If PR, put image tags in the PR comments
      - name: Create or update comment for image tags
        uses: peter-evans/create-or-update-comment@v3.0.2
        if: github.event_name == 'pull_request' && inputs.comment-enable
        with:
          comment-id: ${{ steps.image-comment.outputs.comment-id }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            Docker image tag(s) pushed:
            ```text
            ${{ steps.meta.outputs.tags }} 
            ```

            Labels added to images:
            ```text
            ${{ steps.meta.outputs.labels }}
            ```
          edit-mode: replace

        # we need to output the unique tag for this GHA run
        # based on the tag priority rules, the highest priority tag will be sent to this output
        # use this tag in another job with needs.<job-name>.outputs.image-tag
      - name: Find the primary image tag we just pushed, and output it
        id: image-tag
        run: |
          # shellcheck disable=SC2086
          echo "image-tag=${{ steps.meta.outputs.version }}" >> $GITHUB_OUTPUT